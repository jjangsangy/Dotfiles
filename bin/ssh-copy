#!/bin/bash
#
# FILE:         ssh-copy
# AUTHOR:       Sang Han
# VERSION:      2.3
# DESCRIPTION   Utility for automatically exporting ssh keys into remote servers for authentication.
#               Checks $HOME/.ssh for id_rsa.pub or id_dsa.pub and appends them into
#               the authorized_keys of remote host
#               Checks home .ssh directory for id_rsa or id_dsa public keys and
#               appends them into the authorized_keys using a remote ssh server
# DEPENDS:      Secure Shell v2.0
# CREATED:      5/28/2013

# Global Variables
PROGNAME="$(basename $0)"

usage() {
    cat <<- DOCUMENT

    $PROGNAME [-h] [-t] [-k key] [-l login] [server]

    Utility for automatically exporting ssh keys into remote servers for authentication.
    Checks $HOME/.ssh for id_rsa.pub or id_dsa.pub and appends them into
    the authorized_keys of remote host

    AUTHOR:     Sang Han
    COMPANY:    Calient Technologies
    YEAR:       2013
    VERSION:    2.3

    -h [help]
        Outputs usage directions
    -t [test]
        Runs unit tests
    -k [key]
        Specify your own public key located in $HOME/.ssh directory
    -l [login]
        Specify user login credentials


DOCUMENT
    exit 0
}

error_exit() {
    printf "ERROR due to ${1:-"Unknown Error"}"
    exit 1
}

test_names() {
    printf "\$KEY is %s\n" "${KEY[i]}"
    printf "\$PUBKEY is %s\n" "${PUBKEY[i]}"
    printf "\$LOGIN_USER is %s\n" "${LOGIN_USER}"
    printf "\$SERVER is %s\n" "${SERVER}"
    printf "\n"
}

install_keys() {
    # Reads the public key file with cat and then logs into ssh server
    # and appends the public key file at the end of the authorized_key file
    # within $HOME
    cat "${PUBKEY[i]}" | \
        ssh -l "$LOGIN_USER" "$SERVER" "\
            if [ -d ~/.ssh ]; then \
                cat >> ~/.ssh/authorized_keys; \
            else \
                mkdir ~/.ssh; \
                cat >> ~/.ssh/authorized_keys; \
            fi"
}

check_keys() {
    # Checks $HOME/.ssh directory for default keys
    if [[ $HOME/.ssh/*.pub ]]; then
        return
    else
        error_exit "missing ssh public keys"
    fi
}

check_auth() {
    # Checks if proper credentials have been given as $1. After credential has
    # been checked, will read and bind the variable.
    local CREDENTIAL=$1
    if [[ ! ${!CREDENTIAL} ]]; then
        read -p "${CREDENTIAL}:  " ${CREDENTIAL}
    fi
}

check_server() {
    SERVER=$1
    if [[ "$SERVER" =~ @ ]]; then
        LOGIN_USER=${SERVER%@*}
        SERVER=${SERVER#*@}
        return
    fi
}

main() {
    # Declare default $KEY if not set already
    if [[ -z $KEY ]]; then
        declare -a KEY=("id_rsa" "id_dsa")
    fi

    for (( i=0; i<${#KEY[@]}; i+=1 )); do
        # Path to key file
        local PUBKEY[i]=$HOME/.ssh/${KEY[i]}.pub

        # Unit Test runs every iteration
        if (($TEST==1)); then
            test_names
            return
        fi

        # Gather necessary parameters
        if [[ -r "${PUBKEY[i]}" ]]; then
            check_auth LOGIN_USER
            check_auth SERVER
            install_keys && break
        fi
    done
}

# GETOPTS
declare -i TEST=0
while getopts ":k:l:th" OPTION; do
    case $OPTION in
        h) usage
            ;;
        k) KEY=$OPTARG
            ;;
        t) TEST=1
            ;;
        l) LOGIN_USER=$OPTARG
            ;;
        ?) { echo "Invalid option: -${OPTARG}"; usage; } >&2
            exit 1
            ;;
    esac
done
    shift $((OPTIND-1))

if [[ "$0" == "${BASH_SOURCE}" ]]; then

    if [[ $# = 1 ]]; then
        check_server $1
    fi
    check_keys
    main
fi
