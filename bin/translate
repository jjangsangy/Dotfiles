#!/usr/bin/env python
# ==============================================================================
#       AUTHOR: Sang Han
# REQUIREMENTS: Requests Module
#               Google API Key
# ==============================================================================
import sys
import requests
from argparse import ArgumentParser, FileType
from os.path import dirname, abspath, join
from functools import wraps
from multiprocessing.dummy import Pool as ThreadPool

# Retrieves API Key
def api_key(filename):
    program_directory = dirname(abspath(__file__))
    filepath = join(program_directory, filename)
    with open(filepath, 'rt') as key:
        return key.readline().strip()

# Requests Object Decorator
def formatting(request):
    ''' Wraps the response of a HTTP GET request and returns 
    data field containing translated text. '''
    @wraps(request)
    def translated_text(*args, **kwargs):
        response = request(*args, **kwargs).json()
        return response['data']['translations'][0]['translatedText']
    return translated_text

# The API Key is stored in a seperate file as a security measure.
# User can specify what to name the key in this method.
# Default directory point to same directory as python executible.
@formatting
def post_request(text):
    base = 'https://www.googleapis.com/language/translate/v2'
    key = api_key('translate_api.key')
    params = {
        'key': key,
        'format': 'text',
        'prettyprint': 'true',
        'source': args.source,
        'target': args.dest,
        'q': text
    }
    headers = {'X-HTTP-Method-Override': 'GET'}
    return requests.post(base, params=params, headers=headers)

def main():
    lines = [line for line in sys.stdin]
    pool = ThreadPool(8)
    results = pool.map(post_request, lines)
    for result in results:
        sys.stdout.write(result)

if __name__ == '__main__':
    parser = ArgumentParser(
        description='''
            A command line utility for translating text
            using Google Translate v2 API.
            Takes input from stdin and writes to stdout. ''',
        epilog='''
            User must have a google developers API key tied to a
            billing account. There must be a file located in
            the same directory containing that key in plain text for the
            HTTP request to authenticate. ''')
    parser.add_argument('-v', '--version',
            action='version', version='%(prog)s 1.0')
    parser.add_argument('source',
            help='''Source language to convert from''',
            nargs='?', default='en')
    parser.add_argument('dest',
            help='''Destination language to convert into''')
    parser.add_argument('-f', '--file',
            help='''Specify file as input''',
            metavar='path',
            dest='file',
            type=FileType('r'))
    args = parser.parse_args()

    if args.file:
        sys.stdin = args.file.readlines()

    main()
