#!/usr/bin/env python
# ==============================================================================
#       AUTHOR: Sang Han
# REQUIREMENTS: Requests Module
#               Google API Key
# ==============================================================================
import sys
import requests
from argparse import ArgumentParser, FileType
from os.path import dirname, abspath, join
from functools import wraps

# Retrieves API Key in same directory
def api_key(filename):
    program_directory = dirname(abspath(__file__))
    filepath = join(program_directory, filename)
    with open(filepath, 'rt') as key:
        return key.readline().strip()

# Decorates a request object and outputs the field with translated text
def formatting(request):
    @wraps(request)
    def translated_text(*args, **kwargs):
        response = request(*args, **kwargs).json()
        return response['data']['translations'][0]['translatedText']
    return translated_text

# Makes HTTP GET Request to Google Translate API
@formatting
def request(target, text, *source):
    base = 'https://www.googleapis.com/language/translate/v2'
    key = api_key('translate_api.key')
    params = {
        'key': key,
        'format': 'text',
        'prettyprint': 'true',
        'source': source,
        'target': target,
        'q': text
    }
    return requests.get(base, params=params)

def main():
    try:
        for line in sys.stdin:
            sys.stdout.write(request(args.dest, line, args.source))
    except KeyboardInterrupt:
        sys.exit(0)

if __name__ == '__main__':
    parser = ArgumentParser(
        description='''
            A command line utility for translating text
            using Google Translate v2 API.
            Takes input from stdin and writes to stdout.
            ''',
        epilog='''
            User must have a google developers API key tied to a
            billing account. There must be a file located in
            the same directory containing that key in plain text for the
            HTTP request to authenticate.
            ''')
    parser.add_argument('-v', '--version',
            action='version', version='%(prog)s 1.0')
    parser.add_argument('source',
            help='''Source language to convert from''',
            nargs='?', default='en')
    parser.add_argument('dest',
            help='''Destination language to convert into''')
    parser.add_argument('-f', '--file',
            help='''Specify file as input''',
            metavar='path',
            type=FileType('r'))
    args = parser.parse_args()

    if args.file:
        sys.stdin = args.file.readlines()

    main()
