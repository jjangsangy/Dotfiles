#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Author: Sang Han 2014

A console script and REST API Client for Xively data.
Only supports a minimal amount of features necessary
for collecting and formatting data and HTTP/1.1 GET Requests.
More complicated features and logic should not be implemented in this
way.
"""
from __future__ import print_function, unicode_literals

from   argparse import ArgumentParser
import dateutil.parser
import json
import requests
import sys

# Don't generate *.pyc/__pycache__ for single file programs
sys.dont_write_bytecode = True

# TODO: Convert to package for easy distribution to windows machines
# ==============================================================================
# API Globals
# ==============================================================================
API_KEY = "2jAqS1oCOKTQMrn84UIgMp7kpHoYhZFSV0acxsb3fntyANwX"
FEED    = "1323604224"

# ==============================================================================
# Argument Parsing
# ==============================================================================
# TODO: Allow specifying the start and end time for reading.
# TODO: Move parser out of global scope
parser = ArgumentParser()
parser.add_argument(
    '-v', '--version', action='version', version='0.0.1'
)
parser.add_argument(
    'stream', nargs='?', default=None,
    help='Specify a datastream object'
)
parser.add_argument(
    '--limit', metavar='lim',
    help='Maximum data points returned per call Default: 100, Max: 1000'
)
parser.add_argument(
    '--filetype', default='csv', metavar='ft', choices=('json', 'csv', 'xml'),
    help='Specity returned markup language Default: csv'
)
parser.add_argument(
    '--duration', default=None, metavar='time',
    help='Duration period over where data is collected, Default: 6hours'
)
parser.add_argument(
    '--interval', default=30, metavar='rep',
    help='Only grab at intervals of Default: 30s'
)
args = parser.parse_args()

# ==============================================================================
# Functions
# ==============================================================================
# TODO: Replace Third Party Requests Module with urllib
def connect():
    """Composes a request to Xively API endpoint and returns a response object"""
    base = 'https://api.xively.com/v2/feeds'
    url  = '{base}/{feed}.{ext}'.format(
            base=base, feed=FEED, ext=args.filetype
    )
    headers = {
        "X-ApiKey": API_KEY,
            "Host": "api.xively.com",
    }
    params = {
        "datastreams": args.stream,
           "duration": args.duration,
           "interval": args.interval,
              "limit": args.limit
    }
    return requests.get(url, headers=headers, params=params)

# Function Scaffold
# TODO: Move formatting and parsing logit out of main
def to_csv(resp):
    """Handle parsing comma seperated files"""
    pass

# Function Scaffold
def to_json(resp):
    """Unpack Response object and returns using JSON schema mapped to Python Dict"""
    try:
        # Requests Module
        return resp.json()
    except:
        # Python Module
        return json.loads(resp.text)

# Function Scaffold
def to_xml(resp):
    """Handle parsing XML"""
    pass

# TODO: Add Support for JSON and XML
# TODO: Better Datetime handling for passing to plotting and analytics methods
# Warning: Currently only supports handling csv formatted output
def main():
    request = connect()

    # CSV Parser and Formatting
    if request.ok and request.text == "":
        sys.stderr.write("No data exists at the range you specified\n")
        sys.exit(1)
    if request.ok:
        points = (data.split(',') for data in request.text.split('\n'))
        # Header
        print('{date:10} {time:9} {device:9} {temperature:10}'.format(
                   date = 'Date',
                   time = 'Time',
            temperature = 'Temp F',
                 device = 'Device',
        ))
        # Values
        for point in points:
            print(dateutil.parser.parse(point[1].replace('T', ' ')).ctime()[0:-4],
                '{device:9} {temperature:0= 6.2f}'.format(
                         device = point[0],
                    temperature = float(point[2])
        ))
    elif request.status_code == 403:
        sys.stderr.write(
            """
            You have specified a range that exceeded the maximum allowable values
            Please modify the `--duration` and --interval
            \n"""
        )
        sys.exit(1)
    elif request.status_code != requests.codes.ok:
        return request.raise_for_status()
    else:
        sys.stderr.write("Program failed to execute\n")
        sys.exit(1)

# ==============================================================================
# Entry Point
# ==============================================================================
if __name__ == '__main__':
    sys.exit(main())
