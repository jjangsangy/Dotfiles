#!/usr/bin/env bash
#
# Sang Han
# Calient Technologies 2013
# Pin Prober Parsing Script
# Version 2.0.0rc

# TODO: Usage statement and getopts loops
# TODO: Build OS Pathing interface for cross platform;
#       may need to implement $uname -s or use shell lib
WaferID=${1}
locID=${2}
pubDir=/Volumes/PubStore
filePath="${pubDir}/_Production Data/MEMs PROBE DATA/OSF"

# TODO: Implement operator feature in the future
function operators () {
    find . -name '*.csv' -type f -exec awk -F "," \
        '/%Operaror/ {print $2}' {} \; | \
            awk -v count=0 '\
        /${operator}/ {count=count+1}; \
        END {print count}'
    }

# TODO: Replace both grep commands with AWK
# TODO: Declare array or variable for substituting regex search.
function pinGrepHead () {
        grep -E '%Mirror ID:|%Operaror:|%Comment:|%Start Date:'
    }

function pinGrepTail () {
        grep -E '101 - Shorted|102 - Over Current|103 - No Deflection|105 - Off Azimuth|104 - Bad Initial Angle|106 - V Limit Poor Deflect|107 - M Limit Poor Deflect|108 - V Limit Full Deflect|109 - M Limit Full Deflect|100 - Full Def'
    }

# TODO: Source smb mounting library
function mountCalient ()
    {
        mount -t smbfs -o soft //visual:visual@sbnetapp/PubStore ${pubDir}
    }

if [[ $# -eq 1 ]] ; then locID="R*C*"

elif [[ $# -eq 0 ]] || [[ $# -gt 2 ]] ; then
    echo "Please enter Wafer and Row/Column"
    read WaferID locID
fi

if ! [[ -d "${pubDir}" ]] ; then
    echo "Directory does not exist, creating directory and mounting drive"
    mkdir ${pubDir} && mountCalient || rmdir ${pubDir}

elif ! [[ -d  "${filePath}" ]] ; then
    echo "Drive is not mounted"
    echo "Mounting Drive"
    mountCalient
fi

# TODO: No more modification of IFS.
# TODO: Replace temp dir dependency by using named pipes or process substitution.
if [[ -d "${filePath}/${WaferID}" ]] ; then
    IFS=$'\n'
    pArray=(`ls -1 ${filePath}/${WaferID}/${WaferID}\ ${locID}.csv | sed 's/*//g'`)
    pinCount=${#pArray[@]}

    [[ -f "/tmp/${WaferID}_yield2.csv" ]] && rm /tmp/${WaferID}_yield2.csv
    [[ -f "/tmp/${WaferID}_die2.csv" ]] && rm /tmp/${WaferID}_die2.csv

# TODO: Replace FOR Loop with AWK. Try to avoid array syntax in general
# int main(int argc, char *argv)
    printf "We have found %d dies\n" ${pinCount}
    for i in "${pArray[@]}";
    do
        echo ${i} | rev | cut -d '/' -f -1 | rev | cut -d '.' -f 1
        head ${i} | pinGrepHead | cut -d ',' -f 1-2 >> /tmp/${WaferID}_yield2.csv
        tail ${i} | pinGrepTail | cut -d ',' -f 1-2 >> /tmp/${WaferID}_yield2.csv
    done
echo "DONE!"

# TODO: OPEN builtin only applies for OS X. Replace usage with something cross platform.
open /tmp/${WaferID}_yield2.csv

else
    echo "Wafer does not exist"
    return 0
fi
