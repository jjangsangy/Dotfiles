#!/bin/bash
#
# FILE:         install_bin
# AUTHOR:       Sang Han
# VERSION:      1.0.0rc
# DESCRIPTION   Install binnary executables
# DEPENDS:      Dotfiles

usage() {
    cat <<- EOF
    $(basename $0) [-h help]

    Install utility for dotfile configs

    AUTHOR:     Sang Han
    YEAR:       2013
    VERSION:    1.0.0rc

    -h [help]
        Outputs usage directions
    -f [force]
        force overwrite all files
    -i [noclobber]
        ensure that no files get overwritten during link


EOF
    exit 0
}

SOURCE_DIRECTORY="$(dirname ${BASH_SOURCE[0]})"

script_exit() {
    printf "Script Exiting\n" >&2
    exit 1
}

check_destination() {
#   Create destination folder if it doesn't exist
#   Takes 1 argument for destination directory
    local DESTINATION="${1-:$HOME/bin}"
    if [[ ! -d "${DESTINATION}" ]]; then
        printf "Folder %s does not exist\n" "${DESTINATION}"
        read -p "Would you like to make one? [Yy]/[Nn]   " RESPONSE
            if [[ $RESPONSE =~ [Yy] ]]; then
                mkdir ${DESTINATION}
            else
                script_exit
            fi
    fi
}

link_file() {
        printf "%-25s linked to %-40s\n" "$file" "$HOME/bin/$file"
        ln "$file" "$bin_file" || continue
}


test_files() {
    for file in *; do
        local bin_file="$HOME/bin/$file"
        if [[ -e "$bin_file" ]]; then
            printf "%s file already exists\n" $bin_file
            read -p "Would you like to overwrite it? [Yy]/[Nn]   " RESPONSE
            if [[ $RESPONSE =~ ^[Yy] ]]; then
                rm $bin_file || continue
                link_file
            else
                script_exit
            fi
        else
            link_file
        fi
    done
}

# Parse Options
declare -i FORCE=0
while getopts ":h" OPTION; do
    case ${OPTION} in
        h) usage
            ;;
        f) FORCE=1
            ;;
        ?) echo "Invalid option: -${OPTARG}" >&2
           exit 1
            ;;
    esac
done
    shift $(($OPTIND-1))

main() {
    check_destination
    test_files
}

if [[ "$0" == ${BASH_SOURCE} ]]; then
    main
fi
