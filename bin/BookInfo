#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
BookInfo

A book search utility so you spend less time searching and more time reading.
"""

from __future__ import print_function

import functools
import json
import sys

from urllib.request import urlopen, Request
from urllib.parse import urlencode
from urllib.error import HTTPError

try:
    from pygments import highlight
    from pygments.lexers.web import JsonLexer
    from pygments.formatters import Terminal256Formatter
except: # No color for you
    pass

def push_url(func):

    @functools.wraps(func)
    def wrapper(*args, **kwargs):

        headers = {
            'User-Agent': 'BookInfo v0.0.1',
            'Content-Type': 'application/json; charset=utf-8'
        }
        req_url = func(*args, **kwargs)
        request = urlopen(Request(req_url, headers=headers))

        if request.code != 200:
            raise HTTPError

        response = json.loads(request.read().decode('utf-8'))

        return response.get('items')


    return wrapper


@push_url
def book_request(title, author=None, start_index=0, max_results=10, language_code='', fields=()):
    base = r'https://www.googleapis.com/books/v1/volumes'
    query = r''
    query = '"{0}"'.format(':'.join(['intitle', title]))

    if author:
        authors = '"{0}"'.format(':'.join(['inauthor', author]))
        query = '+'.join([query, authors]).strip('+')

    # Encode Parameters
    params = urlencode({
                   'q': query,
          'startIndex': start_index,
          'maxResults': max_results,
        'langRestrict': language_code,
    })

    # Optimizes amount of data requested
    fieldstring = 'fields={prefix}({fields})'.format(
        prefix='/'.join(['items', 'volumeInfo']),
        fields=','.join(('authors', 'title', 'industryIdentifiers') + fields),
    )

    return '&'.join(['?'.join([base, params]), fieldstring])


def main(title):
    ansi  = {
        'underline': '\033[4m',
        'bold': '\033[1m',
        'end': '\033[0m',
    }
    fields = 'title', 'authors', 'imageLinks', 'categories', 'description'
    books  = book_request(' '.join(title), fields=fields)

    for book in books:
        info = book.get('volumeInfo')
        print('{ansi[bold]}{ansi[underline]}{info[title]}{ansi[end]}'.format(
              ansi=ansi,info=info)
        )

        jsontree = json.dumps(
            info,
            indent=2,
            sort_keys=True,
            separators=(', ', ': '),
        )

        try: jsontree = highlight(
                jsontree,
                JsonLexer(),
                Terminal256Formatter(style='autumn'))
        except: pass

        print(jsontree, end='\n\n')


if __name__ == '__main__':

    main(sys.argv[1:])
