" - Sang Han's Vimrc
" ==========================================================
set nocompatible
syntax enable

" Vundle
filetype on
filetype off
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" - Mapleader set to comma
let mapleader = ','

" - Install Vundle bundles
" ==========================================================
if filereadable(expand("~/.vimrc.bundles"))
  source ~/.vimrc.bundles
  source ~/.vimrc.bundles.local
endif

filetype plugin indent on

" - Basic Settings
" ==========================================================
set hlsearch
set nowrap
set splitright
set splitbelow
set autoindent
set autoread
set backspace=2
set backupcopy=yes
set clipboard=unnamed
set directory-=.
set encoding=utf-8
set expandtab
set ignorecase
set incsearch
set laststatus=2
set list
set listchars=tab:▸\ ,trail:▫
set number
set ruler
set scrolloff=3
set shiftwidth=4
set showcmd
set smartcase
set softtabstop=4
set tabstop=4
set wildignore=log/**,node_modules/**,target/**,tmp/**,*.rbc
set wildmenu
set wildmode=longest,list,full
set foldcolumn=2

" Enable basic mouse behavior such as resizing buffers.
set mouse=a
if exists('$TMUX')  " Support resizing in tmux
  set ttymouse=xterm2
endif

" - Shortcuts
" ==========================================================
" Edit Vimrc:           <leader>ev
" Source Vimrc:         <leader>sv
nnoremap <silent> <leader>ev :vsplit $MYVIMRC<cr>
nnoremap <silent> <leader>sv :source $MYVIMRC<CR>:filetype detect<CR>:exe ":echo 'vimrc reloaded'"<CR>

" Code folding with <Space>
nnoremap <silent> <Space> @=(foldlevel('.')?'za':"\<Space>")<CR>
vnoremap <Space> zf

" Emacs style mappings
noremap <C-e> <esc>$
noremap <C-a> <esc>0

" open/close the quickfix window
nnoremap <leader>c :copen<CR>
nnoremap <leader>cc :cclose<CR>

" save and close file
nnoremap <C-w> <esc>:w<CR>
nnoremap <C-w><c-w> <esc>:wq<CR>

" - Windows Management
" ==========================================================
" <Ctrl>+hjkl for moving between splits
noremap <C-h> <C-w>h
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k
noremap <C-l> <C-w>l

" - Plugins
" ==========================================================
" Access with mapleader which is set to comma.
" Align:                l
" Ack:                  a
" CtrlP:                t
" CtrlP Clear Cache:    T
" CtrlP Buffer:         b
" NERDTree:             d
" NERDTree Find:        f
" Tagbar Toggle:        ]
" Strip Whitespace:     space
" Git Gutter:           g
" Plug:                 c
noremap <leader>l :Align
nnoremap <leader>a :Ack<space>
nnoremap <leader>b :CtrlPBuffer<CR>
nnoremap <leader>d :NERDTreeToggle<CR>
nnoremap <leader>f :NERDTreeFind<CR>
nnoremap <leader>t :CtrlP<CR>
nnoremap <leader>T :CtrlPClearCache<CR>:CtrlP<CR>
nnoremap <leader>] :TagbarToggle<CR>
nnoremap <leader><space> :call whitespace#strip_trailing()<CR>
nnoremap <leader>g :GitGutterToggle<CR>
nnoremap <leader>c <Plug>Kwbd

" - Settings
" ==========================================================
let g:ctrlp_match_window = 'order:ttb,max:20'
let g:NERDSpaceDelims=1
let g:gitgutter_enabled = 0
let g:BASH_GuiSnippetBrowser = 'commandline'

" Set magenta a magenta bar on lines exceeding 80 chars
highlight ColorColumn ctermbg=magenta
call matchadd('ColorColumn', '\%81v', 100)

" - Silver Searcher
" ==========================================================
if executable('ag')
  let g:ackprg = 'ag --nogroup --column'

  set grepprg=ag\ --nogroup\ --nocolor

" Use ag in CtrlP for listing files
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
endif

" - Filetype Specific
" ==========================================================
autocmd BufRead,BufNewFile *.fdoc set filetype=yaml
autocmd BufRead,BufNewFile *.md set filetype=markdown

" Vimrc
autocmd BufNewFile,BufRead .vimrc setlocal nowrap

" Shell
autocmd BufRead,BufNewFile *path set filetype=sh
autocmd BufRead,BufNewFile *aliases set filetype=sh
autocmd BufRead,BufNewFile *profile set filetype=sh
augroup shell
    autocmd!
     let g:BASH_GuiSnippetBrowser = 'commandline'
    autocmd FileType sh nnoremap <leader>$$ bi$<esc>l
augroup END

" Python
augroup Python
    autocmd!
    let g:pymode = 1
    let g:pymode_folding = 1
    let g:pymode_run_bind = '<leader>r'
augroup END

" - TMUX Cursor Fix
" ==========================================================
if exists('$TMUX')
  let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
  let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
  let &t_SI = "\<Esc>]50;CursorShape=1\x7"
  let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif

" - Source More RC Files
" ==========================================================
if filereadable(expand("~/.vimrc.local"))
  source ~/.vimrc.local
endif
