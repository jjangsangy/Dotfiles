" Vimrc
" =====
if has('neovim') && empty(glob('~/.local/share/nvim/site/autoload/plug.vim'))
    !curl -fL --create-dirs -o ~/.local/share/nvim/site/autoload/plug.vim https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd! VimEnter * PlugInstall --sync | source ~/.config/nvim/init.vim
endif
"
let mapleader = ','

" Load Plug {{{
call plug#begin('~/.vim/plugged')
 if filereadable(expand("~/.vimrc.plug"))
   source ~/.vimrc.plug
 endif

 if filereadable(expand("~/.vimrc.plug.local"))
   source ~/.vimrc.plug.local
 endif
call plug#end()
" }}}

" - Settings {{{
" ==========================================================
set autoindent
set autoread
set backspace=2
set clipboard=unnamedplus
set directory-=.
set encoding=utf-8
set expandtab
set foldcolumn=2
set foldlevelstart=20
set hlsearch
set ignorecase
set incsearch
set laststatus=2
set list
set listchars=tab:▸\ ,trail:▫
set nobackup
set noswapfile
set nowritebackup
set nowrap
set number
set ruler
set scrolloff=3
set shiftwidth=4
set showcmd
set smartcase
set softtabstop=4
set splitright
set tabstop=4
set wildignore=log/**,node_modules/**,target/**,tmp/**,*.rbc
set wildmenu
set wildmode=longest,list,full
" }}}

" - Functions {{{
" ==========================================================
"  Multipurpose Tab Key {{{
"  ------------------------
"  if <line at start position>:
"    do indent
"  else:
"    do completion
function! InsertTabWrapper()
    let col = col('.') - 1
    if !col || getline('.')[col - 1] !~ '\k'
        return "\<tab>"
    else
        return "\<c-p>"
    endif
endfunction
"   }}}

" - Theme {{{
" ==========================================================

" Background
set background=dark

" GUI Colors
if has("termguicolors")
  set termguicolors
else
  set notermguicolors
endif

" Color Scheme
if (&t_Co == 256 || has('gui_running'))
  colorscheme solarized8_flat
  let g:solarized_term_italics=1
  set guifont=Ubuntu\ Mono\ 14
else
  colorscheme tomorrow-night
endif

"   }}}

" Key Remapping {{{
" ==========================================================
"   <Ctrl>+hjkl for moving between splits {{{
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l
"   }}}
"
"   Buffer Management {{{
nnoremap <Right> :bnext<CR>
nnoremap <Left>  :bprevious<CR>
"   }}}
"
"   Emacs style mappings {{{
nnoremap <C-e> <esc>$
nnoremap <C-a> <esc>0
"   }}}
"
"   Sort with <Leader>s {{{
vnoremap <Leader>s :!sort<CR>
"   }}}
"
"   Remove trailing whitespace on <leader>S {{{
nnoremap <leader>S :%s/\s\+$//<cr>:let @/=''<CR>
"   }}}
"
"   Code folding with <Space> {{{
nnoremap <silent> <Space> @=(foldlevel('.')?'za':"\<Space>")<CR>
vnoremap <Space> zf
nnoremap <C-r> zr
nnoremap <C-m> zm
"   }}}
"
"   Better Indentation {{{
vnoremap < <gv
vnoremap > >gv
"   }}}
"
"   MultiTab {{{
inoremap <tab> <c-r>=InsertTabWrapper()<cr>
inoremap <s-tab> <c-n>
"   }}}
"
"   Nohlsearch with enter {{{
nnoremap <CR> :nohlsearch<CR>
"   }}}
"
" }}}

" - Autocommand Groups {{{
" ==========================================================
"   Jump to last cursor position unless it's invalid or an event handler {{{
augroup readpos
  autocmd!
  autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif
  autocmd WinNew      * :wincmd L
augroup END
"   }}}

"   Filetype Configuration {{{
augroup ftconfig
  autocmd!
  autocmd FileType Makefile setlocal noet
  autocmd FileType vim      setlocal fdm=marker shiftwidth=2
augroup END
"   }}}

" }}}
"

" - Plugins Configuration {{{
" ==========================================================
"   Jedi {{{
if has("python3")
  let g:jedi#use_tabs_not_buffers = 1
  let g:jedi#use_splits_not_buffers = "left"
  let g:jedi#show_call_signatures = "1"
  let g:jedi#force_py_version = "3"
endif
"   }}}
"
"   FZF {{{
set rtp+=/usr/local/opt/fzf

let g:fzf_history_dir = '~/.local/share/fzf-history'
let g:fzf_action = {
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-x': 'split',
  \ 'ctrl-v': 'vsplit' }
let g:fzf_layout = {'left': '30%'}
let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'border':  ['fg', 'Ignore'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }

if has('nvim')
  augroup fuzzyfinder
    autocmd!
    autocmd FileType fzf set laststatus=0 noshowmode noruler | autocmd BufLeave <buffer> set laststatus=2 showmode ruler
  augroup END
endif
"   }}}


" }}}

