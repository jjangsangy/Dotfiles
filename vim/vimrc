" - Sang Han's Vimrc  {{{
" ==========================================================
set nocompatible
syntax enable

" }}}
" - Default Mappings {{{
let mapleader = ','
inoremap jk <ESC>

" }}}
" - Install Plug bundles {{{
" ==========================================================
call plug#begin('~/.vim/plugged')
if filereadable(expand("~/.vimrc.plug"))
    source ~/.vimrc.plug
    source ~/.vimrc.plug.local
endif
call plug#end()

filetype plugin indent on

" }}}
" - Basic Settings {{{
" ==========================================================
set nowrap
set splitright
set splitbelow
set autoindent
set autoread
set backspace=2
set backupcopy=yes
set clipboard=unnamed
set directory-=.
set encoding=utf-8
set expandtab
set ignorecase
set incsearch
set laststatus=2
set list
set listchars=tab:▸\ ,trail:▫
set number
set ruler
set scrolloff=3
set shiftwidth=4
set showcmd
set smartcase
set softtabstop=4
set tabstop=4
set wildignore=log/**,node_modules/**,target/**,tmp/**,*.rbc
set wildmenu
set wildmode=longest,list,full
set foldcolumn=2
set foldlevelstart=20
set nobackup
set nowritebackup
set noswapfile
set hlsearch

" Enable basic mouse behavior such as resizing buffers. {{{
set mouse=a
if exists('$TMUX')  " Support resizing in tmux
  set ttymouse=xterm2
endif

" }}}
    " }}}
" - Shortcuts {{{
" ==========================================================
"  Source and Edit VIMRC{{{
" Edit :           <leader>ev
" Source :         <leader>sv
nnoremap <silent> <leader>ev :vsplit $MYVIMRC<CR>
nnoremap <silent> <leader>sv :w<CR>:source $MYVIMRC<CR>:filetype detect<CR>:exe ":echo ' reloaded'"<CR>

" Code folding with <Space> {{{
nnoremap <silent> <Space> @=(foldlevel('.')?'za':"\<Space>")<CR>
vnoremap <Space> zf
noremap <C-r> zr
noremap <C-m> zm

" }}}
"
" Emacs style mappings {{{
noremap <C-e> <esc>$
noremap <C-a> <esc>0
" }}}
"
"{{{ Sort with <Leader>s
vnoremap <Leader>s :!sort<CR>

" }}}
"
" {{{ Remove trailing whitespace on <leader>S
nnoremap <leader>S :%s/\s\+$//<cr>:let @/=''<CR>

" }}}
"
" {{{ Nohlsearch with enter
nnoremap <CR> :nohlsearch<cr>

" }}}

" Leave with <leader>q
nnoremap <leader>q :q<CR

" }}}
" - Windows Management {{{
" ==========================================================
" <Ctrl>+hjkl for moving between splits {{{
noremap <C-h> <C-w>h
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k
noremap <C-l> <C-w>l

" }}}

" Buffer Management {{{
nnoremap <Right> :bnext<CR>
nnoremap <Left>  :bprevious<CR>
" }}}
"     }}}
" - Plugins {{{
" ==========================================================
" Access with mapleader which is set to comma.
" Align:                l
" Ack:                  a
" CtrlP:                t
" CtrlP Clear Cache:    T
" CtrlP Buffer:         b
" NERDTree:             d
" NERDTree Find:        f
" Tagbar Toggle:        ]
" Strip Whitespace:     space
" Git Gutter:           g
" Plug:                 c
noremap <leader>l           :Align
nnoremap <leader>a          :Ack<space>
nnoremap <leader>b          :CtrlPBuffer<CR>
nnoremap <leader>d          :NERDTreeToggle<CR>
nnoremap <leader>f          :NERDTreeFind<CR>
nnoremap <leader>t          :CtrlP<CR>
nnoremap <leader>T          :CtrlPClearCache<CR>:CtrlP<CR>
nnoremap <leader>]          :TagbarToggle<CR>
nnoremap <leader>g          :GitGutterToggle<CR>
nnoremap <leader>c          <Plug>Kwbd

" }}}
" - Settings "{{{
" ==========================================================
" Plugin settings {{{
let g:NERDSpaceDelims = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#fnamemod = ':t'
let g:ctrlp_match_window = 'order:ttb,max:20'
let g:ctrlp_max_files = 0
let g:ctrlp_custom_ignore = '\v\~$|\.(o|swp|pyc|wav|mp3|ogg|blend)$|(^|[/\\])\.(hg|git|bzr)($|[/\\])|__init__\.py'
let g:gitgutter_enabled = 0

" Don't warn on
"   E121 continuation line indentation is not a multiple of four
"   E128 continuation line under-indented for visual indent
"   E711 comparison to None should be 'if cond is not None:'
"   E301 expected 1 blank line, found 0
"   E261 at least two spaces before inline comment
"   E241 multiple spaces after ':'
"   E124 closing bracket does not match visual indentation
"   E126 continuation line over-indented for hanging indent
"   E721 do not compare types, use 'isinstance()'
let g:syntastic_python_checkers=['flake8', 'python']
let g:syntastic_html_tidy_ignore_errors=[" proprietary attribute \"ng-"]
let g:syntastic_python_flake8_args='--ignore=E121,E128,E711,E301,E261,E241,E124,E126,E721
    \ --max-line-length=84'

" YouCompleteMe Overrides {{{
let g:ycm_key_list_select_completion = ['<TAB>', '<Down>']
let g:ycm_key_list_previous_completion = ['<S-Tab>', '<Up>']
let g:ycm_key_invoke_completion = '<C-Space>'
let g:ycm_key_detailed_diagnostics = '<leader>a'
let g:ycm_global_ycm_extra_conf = '/Volumes/User/jjangsangy/.ycm_extra_conf.py'
let g:ycm_confirm_extra_conf = 0
let g:ycm_add_preview_to_completeopt = 1

" Homebrew Python Interpreter
let homebrew_python = '/usr/local/Frameworks/Python.framework/Versions/2.7/bin/python'
if executable(homebrew_python)
    let g:ycm_path_to_python_interpreter = homebrew_python
endif
    " }}}
" }}}
" Line 80 gets a tag {{{
highlight ColorColumn ctermbg=magenta
call matchadd('ColorColumn', '\%81v', 100)

" }}}
" Better Indentation {{{
vnoremap < <gv
vnoremap > >gv

" }}}
    " }}}
" - Silver Searcher {{{
" ==========================================================
" use ag if exists {{{
if executable('ag')
  let g:ackprg = 'ag --nogroup --column'

  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
endif

" pt with unite
if executable('pt')
  nnoremap <silent> ,g :<C-u>Unite grep:. -buffer-name=search-buffer<CR>
  let g:unite_source_grep_command = 'pt'
  let g:unite_source_grep_default_opts = '--nogroup --nocolor'
  let g:unite_source_grep_recursive_opt = ''
  let g:unite_source_grep_encoding = 'utf-8'
endif

"     }}}
" - Filetype Specific {{{
" ==========================================================
" Miscelaneous Filetypes {{{
autocmd BufRead,BufNewFile *.fdoc set filetype=yaml
autocmd BufRead,BufNewFile *.md set filetype=markdown
autocmd BufRead,BufNewFile README set filetype=markdown
" Jump to last cursor position unless it's invalid or an event handler
autocmd BufReadPost *
  \ if line("'\"") > 1 && line("'\"") <= line("$") |
  \   exe "normal! g`\"" |
  \ endif

" }}}
"  Filetype Specific {{{
augroup filetype_vim
    autocmd!
    autocmd FileType vim setlocal foldmethod=marker
augroup END

"    }}}
" Shell Filetype Specific {{{
augroup shell
    autocmd!
    autocmd BufRead,BufNewFile *path set filetype=sh
    autocmd BufRead,BufNewFile *aliases set filetype=sh
    autocmd BufRead,BufNewFile *profile set filetype=sh
    autocmd FileType sh nnoremap <leader>$$ bi$<esc>l
augroup END

"    }}}
" Git Filetype Specific {{{
augroup filetype_git
    autocmd!
    autocmd BufRead, .gitconfig setlocal noexpandtab
    autocmd BufRead, config setlocal noexpandtab
augroup END

" }}}
" HTML Filetype Specific{{{
augroup filetype_html
    autocmd!
    autocmd FileType html setlocal shiftwidth=2 softtabstop=2
augroup END

" }}}
" Python Filetype Specific {{{
augroup Python
    autocmd!
    autocmd FileType python nnoremap <leader>z :!python %<CR>
augroup END

" Typescript Filetype Specific {{{
augroup Typescript
    autocmd!
    autocmd FileType typescript :set makeprg=tsc
augroup END

" Go Filetype Specific {{{
augroup filetype_go
    autocmd!
    autocmd FileType go nmap <leader>r <Plug>(go-run)
    autocmd FileType go nmap <leader>b <Plug>(go-build)
    autocmd FileType go nmap <leader>t <Plug>(go-test)
    autocmd FileType go nmap <leader>c <Plug>(go-coverage)

    autocmd FileType go nmap <Leader>gd <Plug>(go-doc)
    autocmd FileType go nmap <Leader>gv <Plug>(go-doc-vertical)

    let g:go_fmt_command = "goimports"

    autocmd FileType go set noet ci pi sts=0 sw=4 ts=4
augroup END
" }}}

"    }}}
" }}}
" - Gui Options {{{
" ==========================================================

if (&t_Co == 256 || has ('gui_running'))
    set guifont=Ubuntu\ Mono\ 14
    call togglebg#map("<F5>")
    colorscheme solarized

    if strftime("%H") >= 8 && strftime("%H") <= 20
        set background=dark
    else
        set background=dark
    endif

    if has("gui_macvim")
        set guioptions-=rLmT
        let g:BASH_GuiSnippetBrowser = 'gui'
    endif

elseif $COLORTERM == 'gnome-terminal'
    set t_Co=256
    colorscheme Tomorrow-Night
endif

" }}}
" - TMUX Cursor Fix {{{
" ==========================================================
if exists('$TMUX')
    let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
    let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
    let &t_SI = "\<Esc>]50;CursorShape=1\x7"
    let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif

" }}}
" - Source More RC Files {{{
" ==========================================================
if filereadable(expand("~/.vimrc.local"))
    source ~/.vimrc.local
endif
" }}}
"
" {{{ Multipurpose Tab Key
" ==========================================================
" Indent if we're at the beginning of a line. Else, do completion.
function! InsertTabWrapper()
    let col = col('.') - 1
    if !col || getline('.')[col - 1] !~ '\k'
        return "\<tab>"
    else
        return "\<c-p>"
    endif
endfunction
inoremap <tab> <c-r>=InsertTabWrapper()<cr>
inoremap <s-tab> <c-n>

" }}}
