" - Sang Han's Vimrc  {{{
" ==========================================================
set nocompatible
syntax enable

" }}}
" Vundle {{{
filetype on
filetype off
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" }}}
" - Default Mappings {{{
let mapleader = ','
inoremap jk <ESC>

" }}}
" - Install Vundle bundles {{{
" ==========================================================
if filereadable(expand("~/.vimrc.bundles"))
    source ~/.vimrc.bundles
    source ~/.vimrc.bundles.local
endif

filetype plugin indent on

" }}}
" - Basic Settings {{{
" ==========================================================
set nohlsearch
set nowrap
set splitright
set splitbelow
set autoindent
set autoread
set backspace=2
set backupcopy=yes
set clipboard=unnamed
set directory-=.
set encoding=utf-8
set expandtab
set ignorecase
set incsearch
set laststatus=2
set list
set listchars=tab:▸\ ,trail:▫
set number
set ruler
set scrolloff=3
set shiftwidth=4
set showcmd
set smartcase
set softtabstop=4
set tabstop=4
set wildignore=log/**,node_modules/**,target/**,tmp/**,*.rbc
set wildmenu
set wildmode=longest,list,full
set foldcolumn=2
set foldlevelstart=20
set nobackup
set nowritebackup
set noswapfile

" Enable basic mouse behavior such as resizing buffers. {{{
set mouse=a
if exists('$TMUX')  " Support resizing in tmux
  set ttymouse=xterm2
endif

" }}}
    " }}}
" - Shortcuts {{{
" ==========================================================
"  Source and Edit VIMRC{{{
" Edit :           <leader>ev
" Source :         <leader>sv
nnoremap <silent> <leader>ev :vsplit $MYVIMRC<CR>
nnoremap <silent> <leader>sv :w<CR>:source $MYVIMRC<CR>:filetype detect<CR>:exe ":echo ' reloaded'"<CR>

" Save and Quit
nnoremap <leader>ss :w<CR>
nnoremap <leader>sq :wq<CR>
nnoremap <leader>qq :q!<CR>
nnoremap <leader>cc :close<CR>

" }}}
" Code folding with <Space> {{{
nnoremap <silent> <Space> @=(foldlevel('.')?'za':"\<Space>")<CR>
vnoremap <Space> zf
noremap <C-r> zr
noremap <C-m> zm

" }}}
" Emacs style mappings {{{
noremap <C-e> <esc>$
noremap <C-a> <esc>0

" }}}
"{{{ Sort with <Leader>s
vnoremap <Leader>s :sort<CR>

" }}}
" }}}
" - Windows Management {{{
" ==========================================================
" <Ctrl>+hjkl for moving between splits {{{
noremap <C-h> <C-w>h
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k
noremap <C-l> <C-w>l

" }}}
" {{{ Easy resize windows with arrow keys
noremap <Up> <c-w>+
noremap <Down> <c-w>-
noremap <Left> <c-w>>
noremap <Right> <c-w><

" }}}

" Tab Management {{{
" nnoremap <Up>   :tabnext<CR>
" nnoremap <Down> :tabprevious<CR>
nnoremap <C-n>  :tabnew<CR>

" }}}
" Buffer Management {{{
nnoremap <Right> :bnext<CR>
nnoremap <Left>  :bprevious<CR>

" }}}
"     }}}
" - Plugins {{{
" ==========================================================
" Access with mapleader which is set to comma.
" Align:                l
" Ack:                  a
" CtrlP:                t
" CtrlP Clear Cache:    T
" CtrlP Buffer:         b
" NERDTree:             d
" NERDTree Find:        f
" Tagbar Toggle:        ]
" Strip Whitespace:     space
" Git Gutter:           g
" Plug:                 c
noremap <leader>l           :Align
nnoremap <leader>a          :Ack<space>
nnoremap <leader>b          :CtrlPBuffer<CR>
nnoremap <leader>d          :NERDTreeToggle<CR>
nnoremap <leader>f          :NERDTreeFind<CR>
nnoremap <leader>t          :CtrlP<CR>
nnoremap <leader>T          :CtrlPClearCache<CR>:CtrlP<CR>
nnoremap <leader>]          :TagbarToggle<CR>
nnoremap <leader><Space>    :call whitespace#strip_trailing()<CR>
nnoremap <leader>g          :GitGutterToggle<CR>
nnoremap <leader>c          <Plug>Kwbd

" }}}
" - Settings "{{{
" ==========================================================
" Plugin settings {{{
let g:NERDSpaceDelims = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#fnamemod = ':t'
let g:ctrlp_match_window = 'order:ttb,max:20'
let g:ctrlp_max_files = 0
let g:gitgutter_enabled = 0
let g:used_javascript_libs = 'angularjs'
let g:syntastic_html_tidy_ignore_errors=[" proprietary attribute \"ng-"]
let g:ycm_global_ycm_extra_conf = '~/.ycm_extra_conf.py'

" }}}
" Line 80 gets a tag {{{
highlight ColorColumn ctermbg=magenta
call matchadd('ColorColumn', '\%81v', 100)

" }}}
" Better Indentation {{{
vnoremap < <gv
vnoremap > >gv

" }}}
    " }}}
" - Silver Searcher {{{
" ==========================================================
" use ag if exists {{{
if executable('ag')
  let g:ackprg = 'ag --nogroup --column'

  set grepprg=ag\ --nogroup\ --nocolor

" }}}
" Use ag in CtrlP for listing files {{{
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
endif

" }}}
"     }}}
" - Filetype Specific {{{
" ==========================================================
" Miscelaneous Filetypes {{{
autocmd BufRead,BufNewFile *.fdoc set filetype=yaml
autocmd BufRead,BufNewFile *.md set filetype=markdown
autocmd BufRead,BufNewFile README set filetype=markdown

" }}}
"  Filetype Specific {{{
augroup filetype_vim
    autocmd!
    autocmd FileType vim setlocal foldmethod=marker
augroup END

"    }}}
" Shell Filetype Specific {{{
augroup shell
    autocmd!
    autocmd BufRead,BufNewFile *path set filetype=sh
    autocmd BufRead,BufNewFile *aliases set filetype=sh
    autocmd BufRead,BufNewFile *profile set filetype=sh
    autocmd FileType sh nnoremap <leader>$$ bi$<esc>l
augroup END

"    }}}
" Git Filetype Specific {{{
augroup filetype_git
    autocmd!
    autocmd BufRead, .gitconfig setlocal noexpandtab
    autocmd BufRead, config setlocal noexpandtab
augroup END

" }}}
" HTML Filetype Specific{{{
augroup filetype_html
    autocmd!
    autocmd FileType html setlocal shiftwidth=2 softtabstop=2
augroup END

" }}}
" Python Filetype Specific {{{
augroup Python
    autocmd!
    autocmd FileType python nnoremap <leader>z :!python %<CR>
augroup END

"    }}}
" }}}
" - Gui Options {{{
" ==========================================================
if (&t_Co == 256 || has ('gui_running'))
    set guifont=Ubuntu\ Mono:h16
    call togglebg#map("<F5>")
    colorscheme solarized

    if strftime("%H") >= 5 && strftime("%H") <= 20
        set background=light
    else
        set background=light
    endif

    if has("gui_macvim")
        set guioptions-=rLmT        "remove scroll bars
        let g:BASH_GuiSnippetBrowser = 'gui'
    endif
endif

" }}}
" - TMUX Cursor Fix {{{
" ==========================================================
if exists('$TMUX')
    let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
    let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
    let &t_SI = "\<Esc>]50;CursorShape=1\x7"
    let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif

" }}}
" - Source More RC Files {{{
" ==========================================================
if filereadable(expand("~/.vimrc.local"))
    source ~/.vimrc.local
endif
" }}}
